#!/bin/bash
# Network Interface Configuration System
# Copyright (c) 1996-2014 Red Hat, Inc. all rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

. /etc/init.d/functions

cd /etc/sysconfig/network-scripts
. ./network-functions

[ -f ../network ] && . ../network

CONFIG=${1}

need_config "${CONFIG}"

source_config

if [ "${BOOTPROTO}" = "bootp" -o "${BOOTPROTO}" = "dhcp" ]; then
    DYNCONFIG=true
fi

# load the module associated with that device
# /sbin/modprobe ${REALDEVICE}
is_available ${REALDEVICE}

# If the device is a bridge, create it with brctl, if available.
if [ "${TYPE}" = "macvlan" ]; then
    if [ ! -f /sys/class/net/${DEVICE}/type ]; then
        /usr/sbin/ip link add link ${MASTER} name ${DEVICE} type ${LINKTYPE} || exit 1
    fi
    [ -n "${MODE}" ] && /usr/sbin/ip link set ${DEVICE} type ${LINKTYPE} mode ${MODE}
fi


# this isn't the same as the MAC in the configuration filename.  It is
# available as a configuration option in the config file, forcing the kernel
# to think an ethernet card has a different MAC address than it really has.
if [ -n "${MACADDR}" ]; then
    ip link set dev ${DEVICE} address ${MACADDR}
fi
if [ -n "${MTU}" ]; then
    ip link set dev ${DEVICE} mtu ${MTU}
fi

# is the device wireless? If so, configure wireless device specifics
is_wireless_device ${DEVICE} && . ./ifup-wireless

if [ -n "${DYNCONFIG}" ] && [ -x /sbin/dhclient ]; then
    if is_true "${PERSISTENT_DHCLIENT}"; then
        ONESHOT="";
    else
        ONESHOT="-1";
    fi;
    generate_config_file_name
    generate_lease_file_name

    # Initialize the dhclient args and obtain the hostname options if needed:
    DHCLIENTARGS="${DHCLIENTARGS} ${ONESHOT} -q ${DHCLIENTCONF} -lf ${LEASEFILE} -pf /var/run/dhclient-${DEVICE}.pid"
    set_hostname_options DHCLIENTARGS

    echo
    echo -n $"Determining IP information for ${DEVICE}..."

    ethtool_set

    if /sbin/dhclient ${DHCLIENTARGS} ${DEVICE} ; then
        echo $" done."
        dhcpipv4="good"
    else
        echo $" failed."
        if is_true "${IPV4_FAILURE_FATAL}"; then
            exit 1
        fi
        if is_false "$IPV6INIT" || ! is_true "$DHCPV6C"; then
            exit 1
        fi
        net_log "Unable to obtain IPv4 DHCP address ${DEVICE}." warning
    fi
    # end dynamic device configuration
else 
    if [ -z "${IPADDR}" -a -z "${IPADDR0}" -a -z "${IPADDR1}" -a -z "${IPADDR2}" ]; then
        # enable device without IP, useful for e.g. PPPoE
        ip link set dev ${REALDEVICE} up
        ethtool_set
        [ -n "${LINKDELAY}" ] && /bin/sleep ${LINKDELAY}
    else

        expand_config

        [ -n "${ARP}" ] && \
            ip link set dev ${REALDEVICE} $(toggle_value arp $ARP)

        if ! ip link set dev ${REALDEVICE} up ; then
            net_log $"Failed to bring up ${DEVICE}."
            exit 1
        fi

        ethtool_set

        [ -n "${LINKDELAY}" ] && /bin/sleep ${LINKDELAY}

        if [ "${DEVICE}" = "lo" ]; then
            SCOPE="scope host"
        else
            SCOPE=${SCOPE:-}
        fi

        if [ -n "$SRCADDR" ]; then
            SRC="src $SRCADDR"
        else
            SRC=
        fi

        # set IP address(es)
        for idx in {0..256} ; do
            if [ -z "${ipaddr[$idx]}" ]; then
                break
            fi

            if ! LC_ALL=C ip addr ls ${REALDEVICE} | LC_ALL=C grep -q "${ipaddr[$idx]}/${prefix[$idx]}" ; then
                if [ "${REALDEVICE}" != "lo" ] && [ "${arpcheck[$idx]}" != "no" ] ; then
                    ARPING=$(/sbin/arping -c 2 -w ${ARPING_WAIT:-3} -D -I ${REALDEVICE} ${ipaddr[$idx]})
                    if [ $? = 1 ]; then
                        ARPINGMAC=$(echo $ARPING |  sed -ne 's/.*\[\(.*\)\].*/\1/p')
                        net_log $"Error, some other host ($ARPINGMAC) already uses address ${ipaddr[$idx]}."
                        exit 1
                    fi
                fi

                if ! ip addr add ${ipaddr[$idx]}/${prefix[$idx]} \
                    brd ${broadcast[$idx]:-+} dev ${REALDEVICE} ${SCOPE} label ${DEVICE}; then
                    net_log $"Error adding address ${ipaddr[$idx]} for ${DEVICE}."
                fi
            fi

            if [ -n "$SRCADDR" ]; then
                sysctl -w "net.ipv4.conf.${SYSCTLDEVICE}.arp_filter=1" >/dev/null 2>&1
            fi

            # update ARP cache of neighboring computers
            if ! is_false "${arpupdate[$idx]}" && [ "${REALDEVICE}" != "lo" ]; then
                /sbin/arping -q -A -c 1 -I ${REALDEVICE} ${ipaddr[$idx]}
                ( sleep 2;
                /sbin/arping -q -U -c 1 -I ${REALDEVICE} ${ipaddr[$idx]} ) > /dev/null 2>&1 < /dev/null &
            fi

            # set lifetime of address to forever
            ip addr change ${ipaddr[$idx]}/${prefix[$idx]} dev ${REALDEVICE} valid_lft forever preferred_lft forever
        done

        # Set a default route.
        if [ "${DEFROUTE}" != "no" ] && [ -z "${GATEWAYDEV}" -o "${GATEWAYDEV}" = "${REALDEVICE}" ]; then
            # set up default gateway. replace if one already exists
            if [ -n "${GATEWAY}" ] && [ "$(ipcalc --network ${GATEWAY} ${netmask[0]} 2>/dev/null)" = "NETWORK=${NETWORK}" ]; then
                ip route replace default ${METRIC:+metric $METRIC} \
                    ${EXTRA_ROUTE_OPTS} \
                    via ${GATEWAY} ${WINDOW:+window $WINDOW} ${SRC} \
                    ${GATEWAYDEV:+dev $GATEWAYDEV} ||
                    net_log $"Error adding default gateway ${GATEWAY} for ${DEVICE}."
            elif [ "${GATEWAYDEV}" = "${DEVICE}" ]; then
                ip route replace default ${METRIC:+metric $METRIC} \
                    ${EXTRA_ROUTE_OPTS} \
                    ${SRC} ${WINDOW:+window $WINDOW} dev ${REALDEVICE} ||
                    net_log $"Error adding default gateway for ${REALDEVICE}."
            fi
        fi
    fi
fi

# Add Zeroconf route.
if [ -z "${NOZEROCONF}" -a "${ISALIAS}" = "no" -a "${REALDEVICE}" != "lo" ]; then
    ip route add 169.254.0.0/16 dev ${REALDEVICE} metric $((1000 + $(cat /sys/class/net/${REALDEVICE}/ifindex))) scope link
fi

# Inform firewall which network zone (empty means default) this interface belongs to
if [ -x /usr/bin/firewall-cmd -a "${REALDEVICE}" != "lo" ]; then
    /usr/bin/firewall-cmd --zone="${ZONE}" --change-interface="${DEVICE}" > /dev/null 2>&1
fi

# IPv6 initialisation?
/etc/sysconfig/network-scripts/ifup-ipv6 ${CONFIG}
if is_true "${DHCPV6C}" && [ -x /sbin/dhclient ]; then
    generate_config_file_name 6
    generate_lease_file_name 6
    echo
    echo -n $"Determining IPv6 information for ${DEVICE}..."

    # Initialize the dhclient args for IPv6 and obtain the hostname options if needed:
    DHCLIENTARGS="-6 -1 ${DHCPV6C_OPTIONS} ${DHCLIENTCONF} -lf ${LEASEFILE} -pf /var/run/dhclient6-${DEVICE}.pid ${DEVICE}"
    set_hostname_options DHCLIENTARGS

    if /sbin/dhclient $DHCLIENTARGS; then
        echo $" done."
    else
        echo $" failed."
        if [ "${dhcpipv4}" = "good" -o -n "${IPADDR}" ]; then
            net_log "Unable to obtain IPv6 DHCP address ${DEVICE}." warning
        else
            exit 1
        fi
    fi
fi

exec /etc/sysconfig/network-scripts/ifup-post ${CONFIG} ${2}
